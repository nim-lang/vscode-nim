{
    ".source.nim": {
        "procedure": {
            "prefix": "proc",
            "body": "proc ${1:name}(${2:arguments}): ${3:return type} =\n\t$0",
            "description": "A procedure that might have side effects and can access global state"
        },
        "function": {
            "prefix": "func",
            "body": "func ${1:name}(${2:arguments}): ${3:return type} =\n\t$0",
            "description": "A function is a procedure that cannot have side effects nor access non-const global state"
        },
        "method": {
            "prefix": "method",
            "body": "method ${1:name}(${2:arguments}): ${3:return type} =\n\t$0",
            "description": "A method is a procedure that is dynamically dispatched"
        },
        "iterator": {
            "prefix": "iterator",
            "body": "iterator ${1:name}(${2:arguments}): ${3:return type}$0"
        },
        "array": {
            "prefix": "array",
            "body": "array[${1:length}, ${2:type}]$0",
            "descripton": "A fixed length container"
        },
        "sequence": {
            "prefix": "seq",
            "body": "seq[${1:type}]$0",
            "descripton": "A dynamic length container"
        },
        "if": {
            "prefix": "if",
            "body": "if ${1:expression}:\n\t$0",
            "description": "A run-time conditional statement"
        },
        "elif": {
            "prefix": "elif",
            "body": "elif ${1:expression}:\n\t$0"
        },
        "when": {
            "prefix": "when",
            "body": "when ${1:expression}:\n\t$0",
            "description": "A compile-time conditional statement"
        },
        "for": {
            "prefix": "for",
            "body": "for ${1:index} in ${2:sequence}:\n\t$0"
        },
        "while": {
            "prefix": "while",
            "body": "while ${1:expression}:\n\t$0"
        },
        "block": {
            "prefix": "block",
            "body": "block ${1:name}:\n\t$0"
        },
        "case": {
            "prefix": "case",
            "body": "case ${1:value}\n$0"
        },
        "of": {
            "prefix": "of",
            "body": "of ${1:value}:\n\t$0"
        },
        "import from": {
            "prefix": "from",
            "body": "from ${1:module} import ${2:field}"
        },
        "import": {
            "prefix": "import",
            "body": "import ${1:module}"
        },
        "try-except": {
            "prefix": "try",
            "body": "try:\n\t$0\nexcept ${1:exception}:\n\t"
        },
        "template": {
            "prefix": "template",
            "body": "template ${1:name}(${2:arguments}): ${3:return type} =\n\t$0",
            "description": "A simple substitution mechanism that generates code at compile-time"
        },
        "macro": {
            "prefix": "macro",
            "body": "macro ${1:name}(${2:arguments}): ${3:return type} =\n\t$0",
            "description": "A function that is executed at compile-time and transforms a Nim syntax tree into a different tree"
        },
        "pragma": {
            "prefix": "pr",
            "body": "{.${1:name}.}"
        },
        "type": {
            "prefix": "type",
            "body": "type ${1:name} = $0"
        },
        "object": {
            "prefix": "object",
            "body": "object\n\t${1:field_name}: ${2:field_type}$0"
        },
        "tuple": {
            "prefix": "tuple",
            "body": "tuple\n\t${1:field_name}: ${2:field_type}$0"
        },
        "enum": {
            "prefix": "= enum",
            "body": "= enum $0",
            "description": "Define a regular enumeration type"
        },
        "enum (pure)": {
            "prefix": "= enum",
            "body": "{.pure.} = enum $0",
            "description": "Define a 'pure' enumeration type"
        },
        "pure enum pragma": {
            "prefix": "{.pure.}",
            "body": "{.pure.} = enum $0",
            "description": "Define a 'pure' enumeration type"
        },
        "echo": {
            "prefix": "echo",
            "body": "echo ",
            "description": "Echo text to the console (cannot be used inside functions)"
        },
        "echo a variable using strformat": {
            "prefix": "echo &",
            "body": "echo &\"{${1:variable}=}\"",
            "description": "Echo a variable (requires importing std/strformat)"
        },
        "debugEcho": {
            "prefix": "debugEcho",
            "body": "debugEcho ",
            "description": "Equivalent to `echo` which can be used inside functions"
        },
        "debugEcho a variable using strformat": {
            "prefix": "debugEcho &",
            "body": "debugEcho &\"{${1:variable}=}\"",
            "description": "Echo a variable inside a function (requires importing std/strformat)"
        }
    }
}
